{{/* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}
{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{/* An example privacy rule that is appended to the generated privacy package. For more info: https://entgo.io/docs/privacy#template-based */}}
{{ define "privacy/additional/privacy" }}

// FilterTenantRule is a query/mutation rule that filters out entities that are not in the tenant.
func FilterTenantRule() QueryMutationRule {
    // TenantsFilter is an interface to wrap WhereTenantID()
    type TenantsFilter interface {
    WhereTenantID(entql.Uint64P)
    }
    return FilterFunc(func (ctx context.Context, f Filter) error {
        if tenantctx.GetTenantAdminCtx(ctx) {
            return privacy.Allow
        }

        tenantId := tenantctx.GetTenantIDFromCtx(ctx)

        tf, ok := f.(TenantsFilter)
        if !ok {
            return privacy.Denyf("unexpected filter type %T", f)
        }
        // Make sure that a tenant reads only entities that have an edge to it.
        tf.WhereTenantID(entql.Uint64EQ(tenantId))
        // Skip to the next privacy rule (equivalent to return nil).
        return privacy.Skip
    })
}
{{ end }}